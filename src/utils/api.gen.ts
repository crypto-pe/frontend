/* eslint-disable */
// cryptope-api v0.0.1 3a6104072feb18c9773bf48e0d75830e72d6432c
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1";

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.0.1";

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "3a6104072feb18c9773bf48e0d75830e72d6432c";

//
// Types
//
export enum TokenType {
  USDC = "USDC",
  DAI = "DAI"
}

export interface Version {
  webrpcVersion: string;
  schemaVersion: string;
  schemaHash: string;
  appVersion: string;
}

export interface Account {
  address: string;
  name: string;
  createdAt: string;
  email: string;
}

export interface Organization {
  id: string;
  name: string;
  createdAt: string;
  ownerAddress: string;
  token: TokenType;
}

export interface OrganizationMember {
  organizationID: string;
  memberAddress: string;
  dateJoined: string;
  role: string;
  isAdmin: boolean;
  salary: number;
}

export interface Payment {
  paymentID: string;
  organizationID: string;
  memberAddress: string;
  transactionHash: string;
  amount: number;
  token: TokenType;
  date: string;
}

export interface Token {
  address: string;
  metadata: { [key: string]: any };
  decimals: number;
}

export interface API {
  ping(headers?: object): Promise<PingReturn>;
  version(headers?: object): Promise<VersionReturn>;
  getSupportedTokens(headers?: object): Promise<GetSupportedTokensReturn>;
  createAccount(
    args: CreateAccountArgs,
    headers?: object
  ): Promise<CreateAccountReturn>;
  login(args: LoginArgs, headers?: object): Promise<LoginReturn>;
  getAccount(args: GetAccountArgs, headers?: object): Promise<GetAccountReturn>;
  updateAccount(
    args: UpdateAccountArgs,
    headers?: object
  ): Promise<UpdateAccountReturn>;
  deleteAccount(headers?: object): Promise<DeleteAccountReturn>;
  createOrganization(
    args: CreateOrganizationArgs,
    headers?: object
  ): Promise<CreateOrganizationReturn>;
  getOrganization(
    args: GetOrganizationArgs,
    headers?: object
  ): Promise<GetOrganizationReturn>;
  updateOrganization(
    args: UpdateOrganizationArgs,
    headers?: object
  ): Promise<UpdateOrganizationReturn>;
  deleteOrganization(
    args: DeleteOrganizationArgs,
    headers?: object
  ): Promise<DeleteOrganizationReturn>;
  getAllOrganizations(headers?: object): Promise<GetAllOrganizationsReturn>;
  createOrganizationMember(
    args: CreateOrganizationMemberArgs,
    headers?: object
  ): Promise<CreateOrganizationMemberReturn>;
  getOrganizationMember(
    args: GetOrganizationMemberArgs,
    headers?: object
  ): Promise<GetOrganizationMemberReturn>;
  getAllOrganizationMembers(
    args: GetAllOrganizationMembersArgs,
    headers?: object
  ): Promise<GetAllOrganizationMembersReturn>;
  updateOrganizationMember(
    args: UpdateOrganizationMemberArgs,
    headers?: object
  ): Promise<UpdateOrganizationMemberReturn>;
  deleteOrganizationMember(
    args: DeleteOrganizationMemberArgs,
    headers?: object
  ): Promise<DeleteOrganizationMemberReturn>;
}

export interface PingArgs {}

export interface PingReturn {
  status: boolean;
}
export interface VersionArgs {}

export interface VersionReturn {
  version: Version;
}
export interface GetSupportedTokensArgs {}

export interface GetSupportedTokensReturn {
  tokens: Array<Token>;
}
export interface CreateAccountArgs {
  ethAuthProofString: string;
  name: string;
  email: string;
}

export interface CreateAccountReturn {
  status: boolean;
  jwtToken: string;
  account: Account;
}
export interface LoginArgs {
  ethAuthProofString: string;
}

export interface LoginReturn {
  jwtToken: string;
  account: Account;
}
export interface GetAccountArgs {
  address: string;
}

export interface GetAccountReturn {
  account: Account;
}
export interface UpdateAccountArgs {
  account: Account;
}

export interface UpdateAccountReturn {
  updateStatus: boolean;
  account: Account;
}
export interface DeleteAccountArgs {}

export interface DeleteAccountReturn {
  deleteStatus: boolean;
}
export interface CreateOrganizationArgs {
  name: string;
  token: TokenType;
}

export interface CreateOrganizationReturn {
  createStatus: boolean;
  organization: Organization;
}
export interface GetOrganizationArgs {
  organizationID: string;
}

export interface GetOrganizationReturn {
  organization: Organization;
}
export interface UpdateOrganizationArgs {
  organization: Organization;
}

export interface UpdateOrganizationReturn {
  updateStatus: boolean;
  organization: Organization;
}
export interface DeleteOrganizationArgs {
  organizationID: string;
}

export interface DeleteOrganizationReturn {
  deleteStatus: boolean;
}
export interface GetAllOrganizationsArgs {}

export interface GetAllOrganizationsReturn {
  organizations: Array<Organization>;
}
export interface CreateOrganizationMemberArgs {
  organizationID: string;
  memberAddress: string;
  role: string;
  isAdmin: boolean;
  salary: number;
}

export interface CreateOrganizationMemberReturn {
  createStatus: boolean;
  organizationMember: OrganizationMember;
}
export interface GetOrganizationMemberArgs {
  organizationID: string;
  memberAddress: string;
}

export interface GetOrganizationMemberReturn {
  organizationMember: OrganizationMember;
}
export interface GetAllOrganizationMembersArgs {
  organizationID: string;
}

export interface GetAllOrganizationMembersReturn {
  organizationMembers: Array<OrganizationMember>;
}
export interface UpdateOrganizationMemberArgs {
  organizationMember: OrganizationMember;
}

export interface UpdateOrganizationMemberReturn {
  updateStatus: boolean;
  organizationMember: OrganizationMember;
}
export interface DeleteOrganizationMemberArgs {
  organizationID: string;
  memberAddress: string;
}

export interface DeleteOrganizationMemberReturn {
  deleteStatus: boolean;
}

//
// Client
//
export class API implements API {
  protected hostname: string;
  protected fetch: Fetch;
  protected path = "/rpc/API/";

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname;
    this.fetch = fetch;
  }

  private url(name: string): string {
    return this.hostname + this.path + name;
  }

  ping = (headers?: object): Promise<PingReturn> => {
    return this.fetch(this.url("Ping"), createHTTPRequest({}, headers)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            status: <boolean>_data.status
          };
        });
      }
    );
  };

  version = (headers?: object): Promise<VersionReturn> => {
    return this.fetch(this.url("Version"), createHTTPRequest({}, headers)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            version: <Version>_data.version
          };
        });
      }
    );
  };

  getSupportedTokens = (
    headers?: object
  ): Promise<GetSupportedTokensReturn> => {
    return this.fetch(
      this.url("GetSupportedTokens"),
      createHTTPRequest({}, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          tokens: <Array<Token>>_data.tokens
        };
      });
    });
  };

  createAccount = (
    args: CreateAccountArgs,
    headers?: object
  ): Promise<CreateAccountReturn> => {
    return this.fetch(
      this.url("CreateAccount"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>_data.status,
          jwtToken: <string>_data.jwtToken,
          account: <Account>_data.account
        };
      });
    });
  };

  login = (args: LoginArgs, headers?: object): Promise<LoginReturn> => {
    return this.fetch(this.url("Login"), createHTTPRequest(args, headers)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            jwtToken: <string>_data.jwtToken,
            account: <Account>_data.account
          };
        });
      }
    );
  };

  getAccount = (
    args: GetAccountArgs,
    headers?: object
  ): Promise<GetAccountReturn> => {
    return this.fetch(
      this.url("GetAccount"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          account: <Account>_data.account
        };
      });
    });
  };

  updateAccount = (
    args: UpdateAccountArgs,
    headers?: object
  ): Promise<UpdateAccountReturn> => {
    return this.fetch(
      this.url("UpdateAccount"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          updateStatus: <boolean>_data.updateStatus,
          account: <Account>_data.account
        };
      });
    });
  };

  deleteAccount = (headers?: object): Promise<DeleteAccountReturn> => {
    return this.fetch(
      this.url("DeleteAccount"),
      createHTTPRequest({}, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          deleteStatus: <boolean>_data.deleteStatus
        };
      });
    });
  };

  createOrganization = (
    args: CreateOrganizationArgs,
    headers?: object
  ): Promise<CreateOrganizationReturn> => {
    return this.fetch(
      this.url("CreateOrganization"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          createStatus: <boolean>_data.createStatus,
          organization: <Organization>_data.organization
        };
      });
    });
  };

  getOrganization = (
    args: GetOrganizationArgs,
    headers?: object
  ): Promise<GetOrganizationReturn> => {
    return this.fetch(
      this.url("GetOrganization"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          organization: <Organization>_data.organization
        };
      });
    });
  };

  updateOrganization = (
    args: UpdateOrganizationArgs,
    headers?: object
  ): Promise<UpdateOrganizationReturn> => {
    return this.fetch(
      this.url("UpdateOrganization"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          updateStatus: <boolean>_data.updateStatus,
          organization: <Organization>_data.organization
        };
      });
    });
  };

  deleteOrganization = (
    args: DeleteOrganizationArgs,
    headers?: object
  ): Promise<DeleteOrganizationReturn> => {
    return this.fetch(
      this.url("DeleteOrganization"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          deleteStatus: <boolean>_data.deleteStatus
        };
      });
    });
  };

  getAllOrganizations = (
    headers?: object
  ): Promise<GetAllOrganizationsReturn> => {
    return this.fetch(
      this.url("GetAllOrganizations"),
      createHTTPRequest({}, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          organizations: <Array<Organization>>_data.organizations
        };
      });
    });
  };

  createOrganizationMember = (
    args: CreateOrganizationMemberArgs,
    headers?: object
  ): Promise<CreateOrganizationMemberReturn> => {
    return this.fetch(
      this.url("CreateOrganizationMember"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          createStatus: <boolean>_data.createStatus,
          organizationMember: <OrganizationMember>_data.organizationMember
        };
      });
    });
  };

  getOrganizationMember = (
    args: GetOrganizationMemberArgs,
    headers?: object
  ): Promise<GetOrganizationMemberReturn> => {
    return this.fetch(
      this.url("GetOrganizationMember"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          organizationMember: <OrganizationMember>_data.organizationMember
        };
      });
    });
  };

  getAllOrganizationMembers = (
    args: GetAllOrganizationMembersArgs,
    headers?: object
  ): Promise<GetAllOrganizationMembersReturn> => {
    return this.fetch(
      this.url("GetAllOrganizationMembers"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          organizationMembers: <Array<OrganizationMember>>(
            _data.organizationMembers
          )
        };
      });
    });
  };

  updateOrganizationMember = (
    args: UpdateOrganizationMemberArgs,
    headers?: object
  ): Promise<UpdateOrganizationMemberReturn> => {
    return this.fetch(
      this.url("UpdateOrganizationMember"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          updateStatus: <boolean>_data.updateStatus,
          organizationMember: <OrganizationMember>_data.organizationMember
        };
      });
    });
  };

  deleteOrganizationMember = (
    args: DeleteOrganizationMemberArgs,
    headers?: object
  ): Promise<DeleteOrganizationMemberReturn> => {
    return this.fetch(
      this.url("DeleteOrganizationMember"),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          deleteStatus: <boolean>_data.deleteStatus
        };
      });
    });
  };
}

export interface WebRPCError extends Error {
  code: string;
  msg: string;
  status: number;
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: "POST",
    headers: { ...headers, "Content-Type": "application/json" },
    body: JSON.stringify(body || {})
  };
};

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data;
    try {
      data = JSON.parse(text);
    } catch (err) {
      throw {
        code: "unknown",
        msg: `expecting JSON, got: ${text}`,
        status: res.status
      } as WebRPCError;
    }
    if (!res.ok) {
      throw data; // webrpc error response
    }
    return data;
  });
};

export type Fetch = (
  input: RequestInfo,
  init?: RequestInit
) => Promise<Response>;
